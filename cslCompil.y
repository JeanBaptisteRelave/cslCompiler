%{
int yyerror(char* s);
#include "cslCompil.c"
%}
%token DEBUT PAR_OU PAR_FER FIN ENTIER BOOLEN ENTIER_NATUREL RETURN REEL ID AF PV PLUS MOINS FOIS DIV MOD ALGO DEC DP TYPE BOOLEEN VIRGL CONSTANCE COMPARATIF OPERATEUR_LOGIQUE TABLEAU_DE PROCEDURE BREAK FOR VARIANT_OF TO FONCTION WHILE_TRUE END_WHILE_TRUE IF ELSE_IF ELSE ENDIF WHILE DO END_DO REPEAT UP_TO
%start S
%%
S : ALGO ID CORPS;
CORPS : DEBUT PROG FIN;
PROG : DECLARATION | AFFECTATION | DECLARATION_SOUS_PROGRAMME | APPEL | STRUCTURE_DE_CONTROLE | BREAK | PROG PROG;

VAL : ENTIER | ENTIER_NATUREL | REEL | BOOLEN;
VAR : ID | APPEL;
OPERATEUR : PLUS | MOINS | FOIS | DIV | MOD;

DECLARATION : DEC ID DP TYPE_DEC PV
            | DEC ID DP TYPE_DEC AF EXPRESSION PV;

EXPRESSION : VAR { $$ = $1; }
            | VAL { $$ = $1; }
            | APPEL { $$ = $1; }
            | EXPRESSION PLUS EXPRESSION { $$ = $1 + $3; }
            | EXPRESSION MOINS EXPRESSION { $$ = $1 - $3; }
            | EXPRESSION FOIS EXPRESSION { $$ = $1 * $3; }
            | EXPRESSION DIV EXPRESSION { $$ = $1 / $3; }
            | EXPRESSION MOD EXPRESSION { $$ = $1 % $3; }
            | PAR_OU EXPRESSION PAR_FER { $$ = $2; }
            ;

PARAMETRE_APPEL : VAR | VAL | PARAMETRE_APPEL VIRGL PARAMETRE_APPEL;
PARAMETRE_SP : ID DP CONSTANCE TYPE | PARAMETRE_SP VIRGL PARAMETRE_SP;

CONDITION: EXPRESSION | EXPRESSION COMPARATIF EXPRESSION | CONDITION OPERATEUR_LOGIQUE CONDITION;
RENVOI: RETURN EXPRESSION PV { $$ = $2; };

TYPE_DEC : TYPE | TABLEAU_DE ENTIER_NATUREL TYPE;
APPEL : ID PAR_OU PARAMETRE_APPEL PAR_FER | ID PAR_OU PAR_FER;

AFFECTATION : ID AF EXPRESSION PV { printf("%d vaut maintenant %d\n", $1, $3); };

DECLARATION_SOUS_PROGRAMME : DECLARATION_PROCEDURE | DECLARATION_FONCTION;

DECLARATION_PROCEDURE : PROCEDURE ID PAR_OU PARAMETRE_SP PAR_FER CORPS;
DECLARATION_FONCTION : FONCTION ID PAR_OU PARAMETRE_SP PAR_FER DEBUT PROG RENVOI FIN;

STRUCTURE_DE_CONTROLE : IF_ | WHILE_DO_ | DO_WHILE_ | WHILE_TRUE_ | FOR_

ELSE_IF_ : ELSE_IF PROG | ELSE_IF PROG ELSE_IF_
IF_: IF PAR_OU CONDITION PAR_FER PROG ENDIF
    | IF PAR_OU CONDITION PAR_FER PROG ELSE_IF_ ENDIF
    | IF PAR_OU CONDITION PAR_FER PROG ELSE_IF_ ELSE PROG ENDIF
    | IF PAR_OU CONDITION PAR_FER PROG ELSE PROG ENDIF;

WHILE_DO_ : WHILE PAR_OU CONDITION PAR_FER DO PROG END_DO;

DO_WHILE_ : REPEAT PROG UP_TO PAR_OU CONDITION PAR_FER;

WHILE_TRUE_ : WHILE_TRUE PROG END_WHILE_TRUE;

FOR_ : FOR PAR_OU ID VARIANT_OF EXPRESSION TO EXPRESSION PAR_FER DO PROG END_DO;

%%
int yyerror(char* S)
{
    printf("Erreur syntaxique a la ligne %d\n", yylineno);
}
void main()
{
    if(!yyparse())
        printf("Fin de l'analyse syntaxique\n");
}